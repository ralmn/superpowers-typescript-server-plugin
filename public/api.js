(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var fix, fs;



fix = "interface ArrayBufferView {}\ndeclare var ArrayBufferView: {};\n\ninterface ArrayBuffer {}\ndeclare var ArrayBuffer: {};\n\ninterface Uint8Array {}\ndeclare var Uint8Array: {};\n\ninterface Int32Array {}\ndeclare var Int32Array: {};\n\ninterface Float32Array {}\ndeclare var Float32Array: {};";

SupAPI.registerPlugin('typescript-server', 'node', {
  defs: "// Type definitions for Node.js v0.12.0\n// Project: http://nodejs.org/\n// Definitions by: Microsoft TypeScript <http://typescriptlang.org>, DefinitelyTyped <https://github.com/borisyankov/DefinitelyTyped>\n// Definitions: https://github.com/borisyankov/DefinitelyTyped\n\n/************************************************\n*                                               *\n*               Node.js v0.12.0 API             *\n*                                               *\n************************************************/\n\n/************************************************\n*                                               *\n*                   GLOBAL                      *\n*                                               *\n************************************************/\ndeclare var process: NodeJS.Process;\ndeclare var global: any;\n\ndeclare var __filename: string;\ndeclare var __dirname: string;\n\ndeclare function setTimeout(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timer;\ndeclare function clearTimeout(timeoutId: NodeJS.Timer): void;\ndeclare function setInterval(callback: (...args: any[]) => void, ms: number, ...args: any[]): NodeJS.Timer;\ndeclare function clearInterval(intervalId: NodeJS.Timer): void;\ndeclare function setImmediate(callback: (...args: any[]) => void, ...args: any[]): any;\ndeclare function clearImmediate(immediateId: any): void;\n\ndeclare var require: {\n    (id: string): any;\n    resolve(id:string): string;\n    cache: any;\n    extensions: any;\n    main: any;\n};\n\ndeclare var module: {\n    exports: any;\n    require(id: string): any;\n    id: string;\n    filename: string;\n    loaded: boolean;\n    parent: any;\n    children: any[];\n};\n\n// Same as module.exports\ndeclare var exports: any;\ndeclare var SlowBuffer: {\n    new (str: string, encoding?: string): Buffer;\n    new (size: number): Buffer;\n    new (size: Uint8Array): Buffer;\n    new (array: any[]): Buffer;\n    prototype: Buffer;\n    isBuffer(obj: any): boolean;\n    byteLength(string: string, encoding?: string): number;\n    concat(list: Buffer[], totalLength?: number): Buffer;\n};\n\n\n// Buffer class\ninterface Buffer extends NodeBuffer {}\ndeclare var Buffer: {\n    new (str: string, encoding?: string): Buffer;\n    new (size: number): Buffer;\n    new (size: Uint8Array): Buffer;\n    new (array: any[]): Buffer;\n    prototype: Buffer;\n    isBuffer(obj: any): boolean;\n    byteLength(string: string, encoding?: string): number;\n    concat(list: Buffer[], totalLength?: number): Buffer;\n};\n\n/************************************************\n*                                               *\n*               GLOBAL INTERFACES               *\n*                                               *\n************************************************/\ndeclare module NodeJS {\n    export interface ErrnoException extends Error {\n        errno?: number;\n        code?: string;\n        path?: string;\n        syscall?: string;\n    }\n\n    export interface EventEmitter {\n        addListener(event: string, listener: Function): EventEmitter;\n        on(event: string, listener: Function): EventEmitter;\n        once(event: string, listener: Function): EventEmitter;\n        removeListener(event: string, listener: Function): EventEmitter;\n        removeAllListeners(event?: string): EventEmitter;\n        setMaxListeners(n: number): void;\n        listeners(event: string): Function[];\n        emit(event: string, ...args: any[]): boolean;\n    }\n\n    export interface ReadableStream extends EventEmitter {\n        readable: boolean;\n        read(size?: number): string|Buffer;\n        setEncoding(encoding: string): void;\n        pause(): void;\n        resume(): void;\n        pipe<T extends WritableStream>(destination: T, options?: { end?: boolean; }): T;\n        unpipe<T extends WritableStream>(destination?: T): void;\n        unshift(chunk: string): void;\n        unshift(chunk: Buffer): void;\n        wrap(oldStream: ReadableStream): ReadableStream;\n    }\n\n    export interface WritableStream extends EventEmitter {\n        writable: boolean;\n        write(buffer: Buffer, cb?: Function): boolean;\n        write(str: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, cb?: Function): boolean;\n        end(): void;\n        end(buffer: Buffer, cb?: Function): void;\n        end(str: string, cb?: Function): void;\n        end(str: string, encoding?: string, cb?: Function): void;\n    }\n\n    export interface ReadWriteStream extends ReadableStream, WritableStream {}\n\n    export interface Process extends EventEmitter {\n        stdout: WritableStream;\n        stderr: WritableStream;\n        stdin: ReadableStream;\n        argv: string[];\n        execPath: string;\n        abort(): void;\n        chdir(directory: string): void;\n        cwd(): string;\n        env: any;\n        exit(code?: number): void;\n        getgid(): number;\n        setgid(id: number): void;\n        setgid(id: string): void;\n        getuid(): number;\n        setuid(id: number): void;\n        setuid(id: string): void;\n        version: string;\n        versions: {\n            http_parser: string;\n            node: string;\n            v8: string;\n            ares: string;\n            uv: string;\n            zlib: string;\n            openssl: string;\n        };\n        config: {\n            target_defaults: {\n                cflags: any[];\n                default_configuration: string;\n                defines: string[];\n                include_dirs: string[];\n                libraries: string[];\n            };\n            variables: {\n                clang: number;\n                host_arch: string;\n                node_install_npm: boolean;\n                node_install_waf: boolean;\n                node_prefix: string;\n                node_shared_openssl: boolean;\n                node_shared_v8: boolean;\n                node_shared_zlib: boolean;\n                node_use_dtrace: boolean;\n                node_use_etw: boolean;\n                node_use_openssl: boolean;\n                target_arch: string;\n                v8_no_strict_aliasing: number;\n                v8_use_snapshot: boolean;\n                visibility: string;\n            };\n        };\n        kill(pid: number, signal?: string): void;\n        pid: number;\n        title: string;\n        arch: string;\n        platform: string;\n        memoryUsage(): { rss: number; heapTotal: number; heapUsed: number; };\n        nextTick(callback: Function): void;\n        umask(mask?: number): number;\n        uptime(): number;\n        hrtime(time?:number[]): number[];\n\n        // Worker\n        send?(message: any, sendHandle?: any): void;\n    }\n\n    export interface Timer {\n        ref() : void;\n        unref() : void;\n    }\n}\n\n/**\n * @deprecated\n */\ninterface NodeBuffer {\n    [index: number]: number;\n    write(string: string, offset?: number, length?: number, encoding?: string): number;\n    toString(encoding?: string, start?: number, end?: number): string;\n    toJSON(): any;\n    length: number;\n    copy(targetBuffer: Buffer, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;\n    slice(start?: number, end?: number): Buffer;\n    readUInt8(offset: number, noAsset?: boolean): number;\n    readUInt16LE(offset: number, noAssert?: boolean): number;\n    readUInt16BE(offset: number, noAssert?: boolean): number;\n    readUInt32LE(offset: number, noAssert?: boolean): number;\n    readUInt32BE(offset: number, noAssert?: boolean): number;\n    readInt8(offset: number, noAssert?: boolean): number;\n    readInt16LE(offset: number, noAssert?: boolean): number;\n    readInt16BE(offset: number, noAssert?: boolean): number;\n    readInt32LE(offset: number, noAssert?: boolean): number;\n    readInt32BE(offset: number, noAssert?: boolean): number;\n    readFloatLE(offset: number, noAssert?: boolean): number;\n    readFloatBE(offset: number, noAssert?: boolean): number;\n    readDoubleLE(offset: number, noAssert?: boolean): number;\n    readDoubleBE(offset: number, noAssert?: boolean): number;\n    writeUInt8(value: number, offset: number, noAssert?: boolean): void;\n    writeUInt16LE(value: number, offset: number, noAssert?: boolean): void;\n    writeUInt16BE(value: number, offset: number, noAssert?: boolean): void;\n    writeUInt32LE(value: number, offset: number, noAssert?: boolean): void;\n    writeUInt32BE(value: number, offset: number, noAssert?: boolean): void;\n    writeInt8(value: number, offset: number, noAssert?: boolean): void;\n    writeInt16LE(value: number, offset: number, noAssert?: boolean): void;\n    writeInt16BE(value: number, offset: number, noAssert?: boolean): void;\n    writeInt32LE(value: number, offset: number, noAssert?: boolean): void;\n    writeInt32BE(value: number, offset: number, noAssert?: boolean): void;\n    writeFloatLE(value: number, offset: number, noAssert?: boolean): void;\n    writeFloatBE(value: number, offset: number, noAssert?: boolean): void;\n    writeDoubleLE(value: number, offset: number, noAssert?: boolean): void;\n    writeDoubleBE(value: number, offset: number, noAssert?: boolean): void;\n    fill(value: any, offset?: number, end?: number): void;\n}\n\n/************************************************\n*                                               *\n*                   MODULES                     *\n*                                               *\n************************************************/\ndeclare module \"buffer\" {\n    export var INSPECT_MAX_BYTES: number;\n}\n\ndeclare module \"querystring\" {\n    export function stringify(obj: any, sep?: string, eq?: string): string;\n    export function parse(str: string, sep?: string, eq?: string, options?: { maxKeys?: number; }): any;\n    export function escape(str: string): string;\n    export function unescape(str: string): string;\n}\n\ndeclare module \"events\" {\n    export class EventEmitter implements NodeJS.EventEmitter {\n        static listenerCount(emitter: EventEmitter, event: string): number;\n\n        addListener(event: string, listener: Function): EventEmitter;\n        on(event: string, listener: Function): EventEmitter;\n        once(event: string, listener: Function): EventEmitter;\n        removeListener(event: string, listener: Function): EventEmitter;\n        removeAllListeners(event?: string): EventEmitter;\n        setMaxListeners(n: number): void;\n        listeners(event: string): Function[];\n        emit(event: string, ...args: any[]): boolean;\n   }\n}\n\ndeclare module \"http\" {\n    import events = require(\"events\");\n    import net = require(\"net\");\n    import stream = require(\"stream\");\n\n    export interface Server extends events.EventEmitter {\n        listen(port: number, hostname?: string, backlog?: number, callback?: Function): Server;\n        listen(path: string, callback?: Function): Server;\n        listen(handle: any, listeningListener?: Function): Server;\n        close(cb?: any): Server;\n        address(): { port: number; family: string; address: string; };\n        maxHeadersCount: number;\n    }\n    /**\n     * @deprecated Use IncomingMessage\n     */\n    export interface ServerRequest extends IncomingMessage {\n        connection: net.Socket;\n    }\n    export interface ServerResponse extends events.EventEmitter, stream.Writable {\n        // Extended base methods\n        write(buffer: Buffer): boolean;\n        write(buffer: Buffer, cb?: Function): boolean;\n        write(str: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, fd?: string): boolean;\n\n        writeContinue(): void;\n        writeHead(statusCode: number, reasonPhrase?: string, headers?: any): void;\n        writeHead(statusCode: number, headers?: any): void;\n        statusCode: number;\n        setHeader(name: string, value: string): void;\n        sendDate: boolean;\n        getHeader(name: string): string;\n        removeHeader(name: string): void;\n        write(chunk: any, encoding?: string): any;\n        addTrailers(headers: any): void;\n\n        // Extended base methods\n        end(): void;\n        end(buffer: Buffer, cb?: Function): void;\n        end(str: string, cb?: Function): void;\n        end(str: string, encoding?: string, cb?: Function): void;\n        end(data?: any, encoding?: string): void;\n    }\n    export interface ClientRequest extends events.EventEmitter, stream.Writable {\n        // Extended base methods\n        write(buffer: Buffer): boolean;\n        write(buffer: Buffer, cb?: Function): boolean;\n        write(str: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, fd?: string): boolean;\n\n        write(chunk: any, encoding?: string): void;\n        abort(): void;\n        setTimeout(timeout: number, callback?: Function): void;\n        setNoDelay(noDelay?: boolean): void;\n        setSocketKeepAlive(enable?: boolean, initialDelay?: number): void;\n\n        // Extended base methods\n        end(): void;\n        end(buffer: Buffer, cb?: Function): void;\n        end(str: string, cb?: Function): void;\n        end(str: string, encoding?: string, cb?: Function): void;\n        end(data?: any, encoding?: string): void;\n    }\n    export interface IncomingMessage extends events.EventEmitter, stream.Readable {\n        httpVersion: string;\n        headers: any;\n        rawHeaders: string[];\n        trailers: any;\n        rawTrailers: any;\n        setTimeout(msecs: number, callback: Function): NodeJS.Timer;\n        /**\n         * Only valid for request obtained from http.Server.\n         */\n        method?: string;\n        /**\n         * Only valid for request obtained from http.Server.\n         */\n        url?: string;\n        /**\n         * Only valid for response obtained from http.ClientRequest.\n         */\n        statusCode?: number;\n        /**\n         * Only valid for response obtained from http.ClientRequest.\n         */\n        statusMessage?: string;\n        socket: net.Socket;\n    }\n    /**\n     * @deprecated Use IncomingMessage\n     */\n    export interface ClientResponse extends IncomingMessage { }\n\n\texport interface AgentOptions {\n\t\t/**\n\t\t * Keep sockets around in a pool to be used by other requests in the future. Default = false\n\t\t */\n\t\tkeepAlive?: boolean;\n\t\t/**\n\t\t * When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = 1000.\n\t\t * Only relevant if keepAlive is set to true.\n\t\t */\n\t\tkeepAliveMsecs?: number;\n\t\t/**\n\t\t * Maximum number of sockets to allow per host. Default for Node 0.10 is 5, default for Node 0.12 is Infinity\n\t\t */\n\t\tmaxSockets?: number;\n\t\t/**\n\t\t * Maximum number of sockets to leave open in a free state. Only relevant if keepAlive is set to true. Default = 256.\n\t\t */\n\t\tmaxFreeSockets?: number;\n\t}\n\n    export class Agent {\n\t\tmaxSockets: number;\n\t\tsockets: any;\n\t\trequests: any;\n\n\t\tconstructor(opts?: AgentOptions);\n\n\t\t/**\n\t\t * Destroy any sockets that are currently in use by the agent.\n\t\t * It is usually not necessary to do this. However, if you are using an agent with KeepAlive enabled,\n\t\t * then it is best to explicitly shut down the agent when you know that it will no longer be used. Otherwise,\n\t\t * sockets may hang open for quite a long time before the server terminates them.\n\t\t */\n\t\tdestroy(): void;\n\t}\n\n    export var STATUS_CODES: {\n        [errorCode: number]: string;\n        [errorCode: string]: string;\n    };\n    export function createServer(requestListener?: (request: IncomingMessage, response: ServerResponse) =>void ): Server;\n    export function createClient(port?: number, host?: string): any;\n    export function request(options: any, callback?: (res: IncomingMessage) => void): ClientRequest;\n    export function get(options: any, callback?: (res: IncomingMessage) => void): ClientRequest;\n    export var globalAgent: Agent;\n}\n\ndeclare module \"cluster\" {\n    import child  = require(\"child_process\");\n    import events = require(\"events\");\n\n    export interface ClusterSettings {\n        exec?: string;\n        args?: string[];\n        silent?: boolean;\n    }\n\n    export class Worker extends events.EventEmitter {\n        id: string;\n        process: child.ChildProcess;\n        suicide: boolean;\n        send(message: any, sendHandle?: any): void;\n        kill(signal?: string): void;\n        destroy(signal?: string): void;\n        disconnect(): void;\n    }\n\n    export var settings: ClusterSettings;\n    export var isMaster: boolean;\n    export var isWorker: boolean;\n    export function setupMaster(settings?: ClusterSettings): void;\n    export function fork(env?: any): Worker;\n    export function disconnect(callback?: Function): void;\n    export var worker: Worker;\n    export var workers: Worker[];\n\n    // Event emitter\n    export function addListener(event: string, listener: Function): void;\n    export function on(event: string, listener: Function): any;\n    export function once(event: string, listener: Function): void;\n    export function removeListener(event: string, listener: Function): void;\n    export function removeAllListeners(event?: string): void;\n    export function setMaxListeners(n: number): void;\n    export function listeners(event: string): Function[];\n    export function emit(event: string, ...args: any[]): boolean;\n}\n\ndeclare module \"zlib\" {\n    import stream = require(\"stream\");\n    export interface ZlibOptions { chunkSize?: number; windowBits?: number; level?: number; memLevel?: number; strategy?: number; dictionary?: any; }\n\n    export interface Gzip extends stream.Transform { }\n    export interface Gunzip extends stream.Transform { }\n    export interface Deflate extends stream.Transform { }\n    export interface Inflate extends stream.Transform { }\n    export interface DeflateRaw extends stream.Transform { }\n    export interface InflateRaw extends stream.Transform { }\n    export interface Unzip extends stream.Transform { }\n\n    export function createGzip(options?: ZlibOptions): Gzip;\n    export function createGunzip(options?: ZlibOptions): Gunzip;\n    export function createDeflate(options?: ZlibOptions): Deflate;\n    export function createInflate(options?: ZlibOptions): Inflate;\n    export function createDeflateRaw(options?: ZlibOptions): DeflateRaw;\n    export function createInflateRaw(options?: ZlibOptions): InflateRaw;\n    export function createUnzip(options?: ZlibOptions): Unzip;\n\n    export function deflate(buf: Buffer, callback: (error: Error, result: any) =>void ): void;\n    export function deflateRaw(buf: Buffer, callback: (error: Error, result: any) =>void ): void;\n    export function gzip(buf: Buffer, callback: (error: Error, result: any) =>void ): void;\n    export function gunzip(buf: Buffer, callback: (error: Error, result: any) =>void ): void;\n    export function inflate(buf: Buffer, callback: (error: Error, result: any) =>void ): void;\n    export function inflateRaw(buf: Buffer, callback: (error: Error, result: any) =>void ): void;\n    export function unzip(buf: Buffer, callback: (error: Error, result: any) =>void ): void;\n\n    // Constants\n    export var Z_NO_FLUSH: number;\n    export var Z_PARTIAL_FLUSH: number;\n    export var Z_SYNC_FLUSH: number;\n    export var Z_FULL_FLUSH: number;\n    export var Z_FINISH: number;\n    export var Z_BLOCK: number;\n    export var Z_TREES: number;\n    export var Z_OK: number;\n    export var Z_STREAM_END: number;\n    export var Z_NEED_DICT: number;\n    export var Z_ERRNO: number;\n    export var Z_STREAM_ERROR: number;\n    export var Z_DATA_ERROR: number;\n    export var Z_MEM_ERROR: number;\n    export var Z_BUF_ERROR: number;\n    export var Z_VERSION_ERROR: number;\n    export var Z_NO_COMPRESSION: number;\n    export var Z_BEST_SPEED: number;\n    export var Z_BEST_COMPRESSION: number;\n    export var Z_DEFAULT_COMPRESSION: number;\n    export var Z_FILTERED: number;\n    export var Z_HUFFMAN_ONLY: number;\n    export var Z_RLE: number;\n    export var Z_FIXED: number;\n    export var Z_DEFAULT_STRATEGY: number;\n    export var Z_BINARY: number;\n    export var Z_TEXT: number;\n    export var Z_ASCII: number;\n    export var Z_UNKNOWN: number;\n    export var Z_DEFLATED: number;\n    export var Z_NULL: number;\n}\n\ndeclare module \"os\" {\n    export function tmpdir(): string;\n    export function hostname(): string;\n    export function type(): string;\n    export function platform(): string;\n    export function arch(): string;\n    export function release(): string;\n    export function uptime(): number;\n    export function loadavg(): number[];\n    export function totalmem(): number;\n    export function freemem(): number;\n    export function cpus(): { model: string; speed: number; times: { user: number; nice: number; sys: number; idle: number; irq: number; }; }[];\n    export function networkInterfaces(): any;\n    export var EOL: string;\n}\n\ndeclare module \"https\" {\n    import tls = require(\"tls\");\n    import events = require(\"events\");\n    import http = require(\"http\");\n\n    export interface ServerOptions {\n        pfx?: any;\n        key?: any;\n        passphrase?: string;\n        cert?: any;\n        ca?: any;\n        crl?: any;\n        ciphers?: string;\n        honorCipherOrder?: boolean;\n        requestCert?: boolean;\n        rejectUnauthorized?: boolean;\n        NPNProtocols?: any;\n        SNICallback?: (servername: string) => any;\n    }\n\n    export interface RequestOptions {\n        host?: string;\n        hostname?: string;\n        port?: number;\n        path?: string;\n        method?: string;\n        headers?: any;\n        auth?: string;\n        agent?: any;\n        pfx?: any;\n        key?: any;\n        passphrase?: string;\n        cert?: any;\n        ca?: any;\n        ciphers?: string;\n        rejectUnauthorized?: boolean;\n    }\n\n    export interface Agent {\n        maxSockets: number;\n        sockets: any;\n        requests: any;\n    }\n    export var Agent: {\n        new (options?: RequestOptions): Agent;\n    };\n    export interface Server extends tls.Server { }\n    export function createServer(options: ServerOptions, requestListener?: Function): Server;\n    export function request(options: RequestOptions, callback?: (res: http.IncomingMessage) =>void ): http.ClientRequest;\n    export function get(options: RequestOptions, callback?: (res: http.IncomingMessage) =>void ): http.ClientRequest;\n    export var globalAgent: Agent;\n}\n\ndeclare module \"punycode\" {\n    export function decode(string: string): string;\n    export function encode(string: string): string;\n    export function toUnicode(domain: string): string;\n    export function toASCII(domain: string): string;\n    export var ucs2: ucs2;\n    interface ucs2 {\n        decode(string: string): string;\n        encode(codePoints: number[]): string;\n    }\n    export var version: any;\n}\n\ndeclare module \"repl\" {\n    import stream = require(\"stream\");\n    import events = require(\"events\");\n\n    export interface ReplOptions {\n        prompt?: string;\n        input?: NodeJS.ReadableStream;\n        output?: NodeJS.WritableStream;\n        terminal?: boolean;\n        eval?: Function;\n        useColors?: boolean;\n        useGlobal?: boolean;\n        ignoreUndefined?: boolean;\n        writer?: Function;\n    }\n    export function start(options: ReplOptions): events.EventEmitter;\n}\n\ndeclare module \"readline\" {\n    import events = require(\"events\");\n    import stream = require(\"stream\");\n\n    export interface ReadLine extends events.EventEmitter {\n        setPrompt(prompt: string, length: number): void;\n        prompt(preserveCursor?: boolean): void;\n        question(query: string, callback: Function): void;\n        pause(): void;\n        resume(): void;\n        close(): void;\n        write(data: any, key?: any): void;\n    }\n    export interface ReadLineOptions {\n        input: NodeJS.ReadableStream;\n        output: NodeJS.WritableStream;\n        completer?: Function;\n        terminal?: boolean;\n    }\n    export function createInterface(options: ReadLineOptions): ReadLine;\n}\n\ndeclare module \"vm\" {\n    export interface Context { }\n    export interface Script {\n        runInThisContext(): void;\n        runInNewContext(sandbox?: Context): void;\n    }\n    export function runInThisContext(code: string, filename?: string): void;\n    export function runInNewContext(code: string, sandbox?: Context, filename?: string): void;\n    export function runInContext(code: string, context: Context, filename?: string): void;\n    export function createContext(initSandbox?: Context): Context;\n    export function createScript(code: string, filename?: string): Script;\n}\n\ndeclare module \"child_process\" {\n    import events = require(\"events\");\n    import stream = require(\"stream\");\n\n    export interface ChildProcess extends events.EventEmitter {\n        stdin:  stream.Writable;\n        stdout: stream.Readable;\n        stderr: stream.Readable;\n        pid: number;\n        kill(signal?: string): void;\n        send(message: any, sendHandle?: any): void;\n        disconnect(): void;\n    }\n\n    export function spawn(command: string, args?: string[], options?: {\n        cwd?: string;\n        stdio?: any;\n        custom?: any;\n        env?: any;\n        detached?: boolean;\n    }): ChildProcess;\n    export function exec(command: string, options: {\n        cwd?: string;\n        stdio?: any;\n        customFds?: any;\n        env?: any;\n        encoding?: string;\n        timeout?: number;\n        maxBuffer?: number;\n        killSignal?: string;\n    }, callback: (error: Error, stdout: Buffer, stderr: Buffer) =>void ): ChildProcess;\n    export function exec(command: string, callback: (error: Error, stdout: Buffer, stderr: Buffer) =>void ): ChildProcess;\n    export function execFile(file: string,\n        callback?: (error: Error, stdout: Buffer, stderr: Buffer) =>void ): ChildProcess;\n    export function execFile(file: string, args?: string[],\n        callback?: (error: Error, stdout: Buffer, stderr: Buffer) =>void ): ChildProcess;\n    export function execFile(file: string, args?: string[], options?: {\n        cwd?: string;\n        stdio?: any;\n        customFds?: any;\n        env?: any;\n        encoding?: string;\n        timeout?: number;\n        maxBuffer?: string;\n        killSignal?: string;\n    }, callback?: (error: Error, stdout: Buffer, stderr: Buffer) =>void ): ChildProcess;\n    export function fork(modulePath: string, args?: string[], options?: {\n        cwd?: string;\n        env?: any;\n        encoding?: string;\n    }): ChildProcess;\n    export function execSync(command: string, options?: {\n        cwd?: string;\n        input?: string|Buffer;\n        stdio?: any;\n        env?: any;\n        uid?: number;\n        gid?: number;\n        timeout?: number;\n        maxBuffer?: number;\n        killSignal?: string;\n        encoding?: string;\n    }): ChildProcess;\n    export function execFileSync(command: string, args?: string[], options?: {\n        cwd?: string;\n        input?: string|Buffer;\n        stdio?: any;\n        env?: any;\n        uid?: number;\n        gid?: number;\n        timeout?: number;\n        maxBuffer?: number;\n        killSignal?: string;\n        encoding?: string;\n    }): ChildProcess;\n}\n\ndeclare module \"url\" {\n    export interface Url {\n        href: string;\n        protocol: string;\n        auth: string;\n        hostname: string;\n        port: string;\n        host: string;\n        pathname: string;\n        search: string;\n        query: any; // string | Object\n        slashes: boolean;\n        hash?: string;\n        path?: string;\n    }\n\n    export interface UrlOptions {\n        protocol?: string;\n        auth?: string;\n        hostname?: string;\n        port?: string;\n        host?: string;\n        pathname?: string;\n        search?: string;\n        query?: any;\n        hash?: string;\n        path?: string;\n    }\n\n    export function parse(urlStr: string, parseQueryString?: boolean , slashesDenoteHost?: boolean ): Url;\n    export function format(url: UrlOptions): string;\n    export function resolve(from: string, to: string): string;\n}\n\ndeclare module \"dns\" {\n    export function lookup(domain: string, family: number, callback: (err: Error, address: string, family: number) =>void ): string;\n    export function lookup(domain: string, callback: (err: Error, address: string, family: number) =>void ): string;\n    export function resolve(domain: string, rrtype: string, callback: (err: Error, addresses: string[]) =>void ): string[];\n    export function resolve(domain: string, callback: (err: Error, addresses: string[]) =>void ): string[];\n    export function resolve4(domain: string, callback: (err: Error, addresses: string[]) =>void ): string[];\n    export function resolve6(domain: string, callback: (err: Error, addresses: string[]) =>void ): string[];\n    export function resolveMx(domain: string, callback: (err: Error, addresses: string[]) =>void ): string[];\n    export function resolveTxt(domain: string, callback: (err: Error, addresses: string[]) =>void ): string[];\n    export function resolveSrv(domain: string, callback: (err: Error, addresses: string[]) =>void ): string[];\n    export function resolveNs(domain: string, callback: (err: Error, addresses: string[]) =>void ): string[];\n    export function resolveCname(domain: string, callback: (err: Error, addresses: string[]) =>void ): string[];\n    export function reverse(ip: string, callback: (err: Error, domains: string[]) =>void ): string[];\n}\n\ndeclare module \"net\" {\n    import stream = require(\"stream\");\n\n    export interface Socket extends stream.Duplex {\n        // Extended base methods\n        write(buffer: Buffer): boolean;\n        write(buffer: Buffer, cb?: Function): boolean;\n        write(str: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, fd?: string): boolean;\n\n        connect(port: number, host?: string, connectionListener?: Function): void;\n        connect(path: string, connectionListener?: Function): void;\n        bufferSize: number;\n        setEncoding(encoding?: string): void;\n        write(data: any, encoding?: string, callback?: Function): void;\n        destroy(): void;\n        pause(): void;\n        resume(): void;\n        setTimeout(timeout: number, callback?: Function): void;\n        setNoDelay(noDelay?: boolean): void;\n        setKeepAlive(enable?: boolean, initialDelay?: number): void;\n        address(): { port: number; family: string; address: string; };\n        unref(): void;\n        ref(): void;\n\n        remoteAddress: string;\n        remoteFamily: string;\n        remotePort: number;\n        localAddress: string;\n        localPort: number;\n        bytesRead: number;\n        bytesWritten: number;\n\n        // Extended base methods\n        end(): void;\n        end(buffer: Buffer, cb?: Function): void;\n        end(str: string, cb?: Function): void;\n        end(str: string, encoding?: string, cb?: Function): void;\n        end(data?: any, encoding?: string): void;\n    }\n\n    export var Socket: {\n        new (options?: { fd?: string; type?: string; allowHalfOpen?: boolean; }): Socket;\n    };\n\n    export interface Server extends Socket {\n        listen(port: number, host?: string, backlog?: number, listeningListener?: Function): Server;\n        listen(path: string, listeningListener?: Function): Server;\n        listen(handle: any, listeningListener?: Function): Server;\n        close(callback?: Function): Server;\n        address(): { port: number; family: string; address: string; };\n        maxConnections: number;\n        connections: number;\n    }\n    export function createServer(connectionListener?: (socket: Socket) =>void ): Server;\n    export function createServer(options?: { allowHalfOpen?: boolean; }, connectionListener?: (socket: Socket) =>void ): Server;\n    export function connect(options: { allowHalfOpen?: boolean; }, connectionListener?: Function): Socket;\n    export function connect(port: number, host?: string, connectionListener?: Function): Socket;\n    export function connect(path: string, connectionListener?: Function): Socket;\n    export function createConnection(options: { allowHalfOpen?: boolean; }, connectionListener?: Function): Socket;\n    export function createConnection(port: number, host?: string, connectionListener?: Function): Socket;\n    export function createConnection(path: string, connectionListener?: Function): Socket;\n    export function isIP(input: string): number;\n    export function isIPv4(input: string): boolean;\n    export function isIPv6(input: string): boolean;\n}\n\ndeclare module \"dgram\" {\n    import events = require(\"events\");\n\n    interface RemoteInfo {\n        address: string;\n        port: number;\n        size: number;\n    }\n\n    interface AddressInfo {\n        address: string;\n        family: string;\n        port: number;\n    }\n\n    export function createSocket(type: string, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;\n\n    interface Socket extends events.EventEmitter {\n        send(buf: Buffer, offset: number, length: number, port: number, address: string, callback?: (error: Error, bytes: number) => void): void;\n        bind(port: number, address?: string, callback?: () => void): void;\n        close(): void;\n        address(): AddressInfo;\n        setBroadcast(flag: boolean): void;\n        setMulticastTTL(ttl: number): void;\n        setMulticastLoopback(flag: boolean): void;\n        addMembership(multicastAddress: string, multicastInterface?: string): void;\n        dropMembership(multicastAddress: string, multicastInterface?: string): void;\n    }\n}\n\ndeclare module \"fs\" {\n    import stream = require(\"stream\");\n    import events = require(\"events\");\n\n    interface Stats {\n        isFile(): boolean;\n        isDirectory(): boolean;\n        isBlockDevice(): boolean;\n        isCharacterDevice(): boolean;\n        isSymbolicLink(): boolean;\n        isFIFO(): boolean;\n        isSocket(): boolean;\n        dev: number;\n        ino: number;\n        mode: number;\n        nlink: number;\n        uid: number;\n        gid: number;\n        rdev: number;\n        size: number;\n        blksize: number;\n        blocks: number;\n        atime: Date;\n        mtime: Date;\n        ctime: Date;\n    }\n\n    interface FSWatcher extends events.EventEmitter {\n        close(): void;\n    }\n\n    export interface ReadStream extends stream.Readable {\n        close(): void;\n    }\n    export interface WriteStream extends stream.Writable {\n        close(): void;\n    }\n\n    export function rename(oldPath: string, newPath: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function renameSync(oldPath: string, newPath: string): void;\n    export function truncate(path: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function truncate(path: string, len: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function truncateSync(path: string, len?: number): void;\n    export function ftruncate(fd: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function ftruncate(fd: number, len: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function ftruncateSync(fd: number, len?: number): void;\n    export function chown(path: string, uid: number, gid: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function chownSync(path: string, uid: number, gid: number): void;\n    export function fchown(fd: number, uid: number, gid: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function fchownSync(fd: number, uid: number, gid: number): void;\n    export function lchown(path: string, uid: number, gid: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function lchownSync(path: string, uid: number, gid: number): void;\n    export function chmod(path: string, mode: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function chmod(path: string, mode: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function chmodSync(path: string, mode: number): void;\n    export function chmodSync(path: string, mode: string): void;\n    export function fchmod(fd: number, mode: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function fchmod(fd: number, mode: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function fchmodSync(fd: number, mode: number): void;\n    export function fchmodSync(fd: number, mode: string): void;\n    export function lchmod(path: string, mode: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function lchmod(path: string, mode: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function lchmodSync(path: string, mode: number): void;\n    export function lchmodSync(path: string, mode: string): void;\n    export function stat(path: string, callback?: (err: NodeJS.ErrnoException, stats: Stats) => any): void;\n    export function lstat(path: string, callback?: (err: NodeJS.ErrnoException, stats: Stats) => any): void;\n    export function fstat(fd: number, callback?: (err: NodeJS.ErrnoException, stats: Stats) => any): void;\n    export function statSync(path: string): Stats;\n    export function lstatSync(path: string): Stats;\n    export function fstatSync(fd: number): Stats;\n    export function link(srcpath: string, dstpath: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function linkSync(srcpath: string, dstpath: string): void;\n    export function symlink(srcpath: string, dstpath: string, type?: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function symlinkSync(srcpath: string, dstpath: string, type?: string): void;\n    export function readlink(path: string, callback?: (err: NodeJS.ErrnoException, linkString: string) => any): void;\n    export function readlinkSync(path: string): string;\n    export function realpath(path: string, callback?: (err: NodeJS.ErrnoException, resolvedPath: string) => any): void;\n    export function realpath(path: string, cache: {[path: string]: string}, callback: (err: NodeJS.ErrnoException, resolvedPath: string) =>any): void;\n    export function realpathSync(path: string, cache?: {[path: string]: string}): string;\n    export function unlink(path: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function unlinkSync(path: string): void;\n    export function rmdir(path: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function rmdirSync(path: string): void;\n    export function mkdir(path: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function mkdir(path: string, mode: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function mkdir(path: string, mode: string, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function mkdirSync(path: string, mode?: number): void;\n    export function mkdirSync(path: string, mode?: string): void;\n    export function readdir(path: string, callback?: (err: NodeJS.ErrnoException, files: string[]) => void): void;\n    export function readdirSync(path: string): string[];\n    export function close(fd: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function closeSync(fd: number): void;\n    export function open(path: string, flags: string, callback?: (err: NodeJS.ErrnoException, fd: number) => any): void;\n    export function open(path: string, flags: string, mode: number, callback?: (err: NodeJS.ErrnoException, fd: number) => any): void;\n    export function open(path: string, flags: string, mode: string, callback?: (err: NodeJS.ErrnoException, fd: number) => any): void;\n    export function openSync(path: string, flags: string, mode?: number): number;\n    export function openSync(path: string, flags: string, mode?: string): number;\n    export function utimes(path: string, atime: number, mtime: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function utimes(path: string, atime: Date, mtime: Date, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function utimesSync(path: string, atime: number, mtime: number): void;\n    export function utimesSync(path: string, atime: Date, mtime: Date): void;\n    export function futimes(fd: number, atime: number, mtime: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function futimes(fd: number, atime: Date, mtime: Date, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function futimesSync(fd: number, atime: number, mtime: number): void;\n    export function futimesSync(fd: number, atime: Date, mtime: Date): void;\n    export function fsync(fd: number, callback?: (err?: NodeJS.ErrnoException) => void): void;\n    export function fsyncSync(fd: number): void;\n    export function write(fd: number, buffer: Buffer, offset: number, length: number, position: number, callback?: (err: NodeJS.ErrnoException, written: number, buffer: Buffer) => void): void;\n    export function writeSync(fd: number, buffer: Buffer, offset: number, length: number, position: number): number;\n    export function read(fd: number, buffer: Buffer, offset: number, length: number, position: number, callback?: (err: NodeJS.ErrnoException, bytesRead: number, buffer: Buffer) => void): void;\n    export function readSync(fd: number, buffer: Buffer, offset: number, length: number, position: number): number;\n    export function readFile(filename: string, encoding: string, callback: (err: NodeJS.ErrnoException, data: string) => void): void;\n    export function readFile(filename: string, options: { encoding: string; flag?: string; }, callback: (err: NodeJS.ErrnoException, data: string) => void): void;\n    export function readFile(filename: string, options: { flag?: string; }, callback: (err: NodeJS.ErrnoException, data: Buffer) => void): void;\n    export function readFile(filename: string, callback: (err: NodeJS.ErrnoException, data: Buffer) => void ): void;\n    export function readFileSync(filename: string, encoding: string): string;\n    export function readFileSync(filename: string, options: { encoding: string; flag?: string; }): string;\n    export function readFileSync(filename: string, options?: { flag?: string; }): Buffer;\n    export function writeFile(filename: string, data: any, callback?: (err: NodeJS.ErrnoException) => void): void;\n    export function writeFile(filename: string, data: any, options: { encoding?: string; mode?: number; flag?: string; }, callback?: (err: NodeJS.ErrnoException) => void): void;\n    export function writeFile(filename: string, data: any, options: { encoding?: string; mode?: string; flag?: string; }, callback?: (err: NodeJS.ErrnoException) => void): void;\n    export function writeFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number; flag?: string; }): void;\n    export function writeFileSync(filename: string, data: any, options?: { encoding?: string; mode?: string; flag?: string; }): void;\n    export function appendFile(filename: string, data: any, options: { encoding?: string; mode?: number; flag?: string; }, callback?: (err: NodeJS.ErrnoException) => void): void;\n    export function appendFile(filename: string, data: any, options: { encoding?: string; mode?: string; flag?: string; }, callback?: (err: NodeJS.ErrnoException) => void): void;\n    export function appendFile(filename: string, data: any, callback?: (err: NodeJS.ErrnoException) => void): void;\n    export function appendFileSync(filename: string, data: any, options?: { encoding?: string; mode?: number; flag?: string; }): void;\n    export function appendFileSync(filename: string, data: any, options?: { encoding?: string; mode?: string; flag?: string; }): void;\n    export function watchFile(filename: string, listener: (curr: Stats, prev: Stats) => void): void;\n    export function watchFile(filename: string, options: { persistent?: boolean; interval?: number; }, listener: (curr: Stats, prev: Stats) => void): void;\n    export function unwatchFile(filename: string, listener?: (curr: Stats, prev: Stats) => void): void;\n    export function watch(filename: string, listener?: (event: string, filename: string) => any): FSWatcher;\n    export function watch(filename: string, options: { persistent?: boolean; }, listener?: (event: string, filename: string) => any): FSWatcher;\n    export function exists(path: string, callback?: (exists: boolean) => void): void;\n    export function existsSync(path: string): boolean;\n    export function createReadStream(path: string, options?: {\n        flags?: string;\n        encoding?: string;\n        fd?: string;\n        mode?: number;\n        bufferSize?: number;\n    }): ReadStream;\n    export function createReadStream(path: string, options?: {\n        flags?: string;\n        encoding?: string;\n        fd?: string;\n        mode?: string;\n        bufferSize?: number;\n    }): ReadStream;\n    export function createWriteStream(path: string, options?: {\n        flags?: string;\n        encoding?: string;\n        string?: string;\n    }): WriteStream;\n}\n\ndeclare module \"path\" {\n\n    export interface ParsedPath {\n        root: string;\n        dir: string;\n        base: string;\n        ext: string;\n        name: string;\n    }\n\n    export function normalize(p: string): string;\n    export function join(...paths: any[]): string;\n    export function resolve(...pathSegments: any[]): string;\n    export function isAbsolute(p: string): boolean;\n    export function relative(from: string, to: string): string;\n    export function dirname(p: string): string;\n    export function basename(p: string, ext?: string): string;\n    export function extname(p: string): string;\n    export var sep: string;\n    export var delimiter: string;\n    export function parse(p: string): ParsedPath;\n    export function format(pP: ParsedPath): string;\n\n    export module posix {\n      export function normalize(p: string): string;\n      export function join(...paths: any[]): string;\n      export function resolve(...pathSegments: any[]): string;\n      export function isAbsolute(p: string): boolean;\n      export function relative(from: string, to: string): string;\n      export function dirname(p: string): string;\n      export function basename(p: string, ext?: string): string;\n      export function extname(p: string): string;\n      export var sep: string;\n      export var delimiter: string;\n      export function parse(p: string): ParsedPath;\n      export function format(pP: ParsedPath): string;\n    }\n\n    export module win32 {\n      export function normalize(p: string): string;\n      export function join(...paths: any[]): string;\n      export function resolve(...pathSegments: any[]): string;\n      export function isAbsolute(p: string): boolean;\n      export function relative(from: string, to: string): string;\n      export function dirname(p: string): string;\n      export function basename(p: string, ext?: string): string;\n      export function extname(p: string): string;\n      export var sep: string;\n      export var delimiter: string;\n      export function parse(p: string): ParsedPath;\n      export function format(pP: ParsedPath): string;\n    }\n}\n\ndeclare module \"string_decoder\" {\n    export interface NodeStringDecoder {\n        write(buffer: Buffer): string;\n        detectIncompleteChar(buffer: Buffer): number;\n    }\n    export var StringDecoder: {\n        new (encoding: string): NodeStringDecoder;\n    };\n}\n\ndeclare module \"tls\" {\n    import crypto = require(\"crypto\");\n    import net = require(\"net\");\n    import stream = require(\"stream\");\n\n    var CLIENT_RENEG_LIMIT: number;\n    var CLIENT_RENEG_WINDOW: number;\n\n    export interface TlsOptions {\n        pfx?: any;   //string or buffer\n        key?: any;   //string or buffer\n        passphrase?: string;\n        cert?: any;\n        ca?: any;    //string or buffer\n        crl?: any;   //string or string array\n        ciphers?: string;\n        honorCipherOrder?: any;\n        requestCert?: boolean;\n        rejectUnauthorized?: boolean;\n        NPNProtocols?: any;  //array or Buffer;\n        SNICallback?: (servername: string) => any;\n    }\n\n    export interface ConnectionOptions {\n        host?: string;\n        port?: number;\n        socket?: net.Socket;\n        pfx?: any;   //string | Buffer\n        key?: any;   //string | Buffer\n        passphrase?: string;\n        cert?: any;  //string | Buffer\n        ca?: any;    //Array of string | Buffer\n        rejectUnauthorized?: boolean;\n        NPNProtocols?: any;  //Array of string | Buffer\n        servername?: string;\n    }\n\n    export interface Server extends net.Server {\n        // Extended base methods\n        listen(port: number, host?: string, backlog?: number, listeningListener?: Function): Server;\n        listen(path: string, listeningListener?: Function): Server;\n        listen(handle: any, listeningListener?: Function): Server;\n\n        listen(port: number, host?: string, callback?: Function): Server;\n        close(): Server;\n        address(): { port: number; family: string; address: string; };\n        addContext(hostName: string, credentials: {\n            key: string;\n            cert: string;\n            ca: string;\n        }): void;\n        maxConnections: number;\n        connections: number;\n    }\n\n    export interface ClearTextStream extends stream.Duplex {\n        authorized: boolean;\n        authorizationError: Error;\n        getPeerCertificate(): any;\n        getCipher: {\n            name: string;\n            version: string;\n        };\n        address: {\n            port: number;\n            family: string;\n            address: string;\n        };\n        remoteAddress: string;\n        remotePort: number;\n    }\n\n    export interface SecurePair {\n        encrypted: any;\n        cleartext: any;\n    }\n\n    export function createServer(options: TlsOptions, secureConnectionListener?: (cleartextStream: ClearTextStream) =>void ): Server;\n    export function connect(options: TlsOptions, secureConnectionListener?: () =>void ): ClearTextStream;\n    export function connect(port: number, host?: string, options?: ConnectionOptions, secureConnectListener?: () =>void ): ClearTextStream;\n    export function connect(port: number, options?: ConnectionOptions, secureConnectListener?: () =>void ): ClearTextStream;\n    export function createSecurePair(credentials?: crypto.Credentials, isServer?: boolean, requestCert?: boolean, rejectUnauthorized?: boolean): SecurePair;\n}\n\ndeclare module \"crypto\" {\n    export interface CredentialDetails {\n        pfx: string;\n        key: string;\n        passphrase: string;\n        cert: string;\n        ca: any;    //string | string array\n        crl: any;   //string | string array\n        ciphers: string;\n    }\n    export interface Credentials { context?: any; }\n    export function createCredentials(details: CredentialDetails): Credentials;\n    export function createHash(algorithm: string): Hash;\n    export function createHmac(algorithm: string, key: string): Hmac;\n    export function createHmac(algorithm: string, key: Buffer): Hmac;\n    interface Hash {\n        update(data: any, input_encoding?: string): Hash;\n        digest(encoding: 'buffer'): Buffer;\n        digest(encoding: string): any;\n        digest(): Buffer;\n    }\n    interface Hmac {\n        update(data: any, input_encoding?: string): Hmac;\n        digest(encoding: 'buffer'): Buffer;\n        digest(encoding: string): any;\n        digest(): Buffer;\n    }\n    export function createCipher(algorithm: string, password: any): Cipher;\n    export function createCipheriv(algorithm: string, key: any, iv: any): Cipher;\n    interface Cipher {\n        update(data: Buffer): Buffer;\n        update(data: string, input_encoding?: string, output_encoding?: string): string;\n        final(): Buffer;\n        final(output_encoding: string): string;\n        setAutoPadding(auto_padding: boolean): void;\n    }\n    export function createDecipher(algorithm: string, password: any): Decipher;\n    export function createDecipheriv(algorithm: string, key: any, iv: any): Decipher;\n    interface Decipher {\n        update(data: Buffer): Buffer;\n        update(data: string, input_encoding?: string, output_encoding?: string): string;\n        final(): Buffer;\n        final(output_encoding: string): string;\n        setAutoPadding(auto_padding: boolean): void;\n    }\n    export function createSign(algorithm: string): Signer;\n    interface Signer {\n        update(data: any): void;\n        sign(private_key: string, output_format: string): string;\n    }\n    export function createVerify(algorith: string): Verify;\n    interface Verify {\n        update(data: any): void;\n        verify(object: string, signature: string, signature_format?: string): boolean;\n    }\n    export function createDiffieHellman(prime_length: number): DiffieHellman;\n    export function createDiffieHellman(prime: number, encoding?: string): DiffieHellman;\n    interface DiffieHellman {\n        generateKeys(encoding?: string): string;\n        computeSecret(other_public_key: string, input_encoding?: string, output_encoding?: string): string;\n        getPrime(encoding?: string): string;\n        getGenerator(encoding: string): string;\n        getPublicKey(encoding?: string): string;\n        getPrivateKey(encoding?: string): string;\n        setPublicKey(public_key: string, encoding?: string): void;\n        setPrivateKey(public_key: string, encoding?: string): void;\n    }\n    export function getDiffieHellman(group_name: string): DiffieHellman;\n    export function pbkdf2(password: string, salt: string, iterations: number, keylen: number, callback: (err: Error, derivedKey: Buffer) => any): void;\n    export function pbkdf2Sync(password: string, salt: string, iterations: number, keylen: number) : Buffer;\n    export function randomBytes(size: number): Buffer;\n    export function randomBytes(size: number, callback: (err: Error, buf: Buffer) =>void ): void;\n    export function pseudoRandomBytes(size: number): Buffer;\n    export function pseudoRandomBytes(size: number, callback: (err: Error, buf: Buffer) =>void ): void;\n}\n\ndeclare module \"stream\" {\n    import events = require(\"events\");\n\n    export interface Stream extends events.EventEmitter {\n        pipe<T extends NodeJS.WritableStream>(destination: T, options?: { end?: boolean; }): T;\n    }\n\n    export interface ReadableOptions {\n        highWaterMark?: number;\n        encoding?: string;\n        objectMode?: boolean;\n    }\n\n    export class Readable extends events.EventEmitter implements NodeJS.ReadableStream {\n        readable: boolean;\n        constructor(opts?: ReadableOptions);\n        _read(size: number): void;\n        read(size?: number): string|Buffer;\n        setEncoding(encoding: string): void;\n        pause(): void;\n        resume(): void;\n        pipe<T extends NodeJS.WritableStream>(destination: T, options?: { end?: boolean; }): T;\n        unpipe<T extends NodeJS.WritableStream>(destination?: T): void;\n        unshift(chunk: string): void;\n        unshift(chunk: Buffer): void;\n        wrap(oldStream: NodeJS.ReadableStream): NodeJS.ReadableStream;\n        push(chunk: any, encoding?: string): boolean;\n    }\n\n    export interface WritableOptions {\n        highWaterMark?: number;\n        decodeStrings?: boolean;\n    }\n\n    export class Writable extends events.EventEmitter implements NodeJS.WritableStream {\n        writable: boolean;\n        constructor(opts?: WritableOptions);\n        _write(data: Buffer, encoding: string, callback: Function): void;\n        _write(data: string, encoding: string, callback: Function): void;\n        write(buffer: Buffer, cb?: Function): boolean;\n        write(str: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, cb?: Function): boolean;\n        end(): void;\n        end(buffer: Buffer, cb?: Function): void;\n        end(str: string, cb?: Function): void;\n        end(str: string, encoding?: string, cb?: Function): void;\n    }\n\n    export interface DuplexOptions extends ReadableOptions, WritableOptions {\n        allowHalfOpen?: boolean;\n    }\n\n    // Note: Duplex extends both Readable and Writable.\n    export class Duplex extends Readable implements NodeJS.ReadWriteStream {\n        writable: boolean;\n        constructor(opts?: DuplexOptions);\n        _write(data: Buffer, encoding: string, callback: Function): void;\n        _write(data: string, encoding: string, callback: Function): void;\n        write(buffer: Buffer, cb?: Function): boolean;\n        write(str: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, cb?: Function): boolean;\n        end(): void;\n        end(buffer: Buffer, cb?: Function): void;\n        end(str: string, cb?: Function): void;\n        end(str: string, encoding?: string, cb?: Function): void;\n    }\n\n    export interface TransformOptions extends ReadableOptions, WritableOptions {}\n\n    // Note: Transform lacks the _read and _write methods of Readable/Writable.\n    export class Transform extends events.EventEmitter implements NodeJS.ReadWriteStream {\n        readable: boolean;\n        writable: boolean;\n        constructor(opts?: TransformOptions);\n        _transform(chunk: Buffer, encoding: string, callback: Function): void;\n        _transform(chunk: string, encoding: string, callback: Function): void;\n        _flush(callback: Function): void;\n        read(size?: number): any;\n        setEncoding(encoding: string): void;\n        pause(): void;\n        resume(): void;\n        pipe<T extends NodeJS.WritableStream>(destination: T, options?: { end?: boolean; }): T;\n        unpipe<T extends NodeJS.WritableStream>(destination?: T): void;\n        unshift(chunk: string): void;\n        unshift(chunk: Buffer): void;\n        wrap(oldStream: NodeJS.ReadableStream): NodeJS.ReadableStream;\n        push(chunk: any, encoding?: string): boolean;\n        write(buffer: Buffer, cb?: Function): boolean;\n        write(str: string, cb?: Function): boolean;\n        write(str: string, encoding?: string, cb?: Function): boolean;\n        end(): void;\n        end(buffer: Buffer, cb?: Function): void;\n        end(str: string, cb?: Function): void;\n        end(str: string, encoding?: string, cb?: Function): void;\n    }\n\n    export class PassThrough extends Transform {}\n}\n\ndeclare module \"util\" {\n    export interface InspectOptions {\n        showHidden?: boolean;\n        depth?: number;\n        colors?: boolean;\n        customInspect?: boolean;\n    }\n\n    export function format(format: any, ...param: any[]): string;\n    export function debug(string: string): void;\n    export function error(...param: any[]): void;\n    export function puts(...param: any[]): void;\n    export function print(...param: any[]): void;\n    export function log(string: string): void;\n    export function inspect(object: any, showHidden?: boolean, depth?: number, color?: boolean): string;\n    export function inspect(object: any, options: InspectOptions): string;\n    export function isArray(object: any): boolean;\n    export function isRegExp(object: any): boolean;\n    export function isDate(object: any): boolean;\n    export function isError(object: any): boolean;\n    export function inherits(constructor: any, superConstructor: any): void;\n}\n\ndeclare module \"assert\" {\n    function internal (value: any, message?: string): void;\n    module internal {\n        export class AssertionError implements Error {\n            name: string;\n            message: string;\n            actual: any;\n            expected: any;\n            operator: string;\n            generatedMessage: boolean;\n\n            constructor(options?: {message?: string; actual?: any; expected?: any;\n                                  operator?: string; stackStartFunction?: Function});\n        }\n\n        export function fail(actual?: any, expected?: any, message?: string, operator?: string): void;\n        export function ok(value: any, message?: string): void;\n        export function equal(actual: any, expected: any, message?: string): void;\n        export function notEqual(actual: any, expected: any, message?: string): void;\n        export function deepEqual(actual: any, expected: any, message?: string): void;\n        export function notDeepEqual(acutal: any, expected: any, message?: string): void;\n        export function strictEqual(actual: any, expected: any, message?: string): void;\n        export function notStrictEqual(actual: any, expected: any, message?: string): void;\n        export var throws: {\n            (block: Function, message?: string): void;\n            (block: Function, error: Function, message?: string): void;\n            (block: Function, error: RegExp, message?: string): void;\n            (block: Function, error: (err: any) => boolean, message?: string): void;\n        };\n\n        export var doesNotThrow: {\n            (block: Function, message?: string): void;\n            (block: Function, error: Function, message?: string): void;\n            (block: Function, error: RegExp, message?: string): void;\n            (block: Function, error: (err: any) => boolean, message?: string): void;\n        };\n\n        export function ifError(value: any): void;\n    }\n\n    export = internal;\n}\n\ndeclare module \"tty\" {\n    import net = require(\"net\");\n\n    export function isatty(fd: number): boolean;\n    export interface ReadStream extends net.Socket {\n        isRaw: boolean;\n        setRawMode(mode: boolean): void;\n    }\n    export interface WriteStream extends net.Socket {\n        columns: number;\n        rows: number;\n    }\n}\n\ndeclare module \"domain\" {\n    import events = require(\"events\");\n\n    export class Domain extends events.EventEmitter {\n        run(fn: Function): void;\n        add(emitter: events.EventEmitter): void;\n        remove(emitter: events.EventEmitter): void;\n        bind(cb: (err: Error, data: any) => any): any;\n        intercept(cb: (data: any) => any): any;\n        dispose(): void;\n\n        addListener(event: string, listener: Function): Domain;\n        on(event: string, listener: Function): Domain;\n        once(event: string, listener: Function): Domain;\n        removeListener(event: string, listener: Function): Domain;\n        removeAllListeners(event?: string): Domain;\n    }\n\n    export function create(): Domain;\n}\n" + fix
});

SupAPI.registerPlugin('typescript-server', 'lib', {
  defs: "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved. \r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \r\n \r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \r\nMERCHANTABLITY OR NON-INFRINGEMENT. \r\n \r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\n/// <reference no-default-lib=\"true\"/>\r\n\r\n/////////////////////////////\r\n/// ECMAScript APIs\r\n/////////////////////////////\r\n\r\ndeclare var NaN: number;\r\ndeclare var Infinity: number;\r\n\r\n/**\r\n  * Evaluates JavaScript code and executes it. \r\n  * @param x A String value that contains valid JavaScript code.\r\n  */\r\ndeclare function eval(x: string): any;\r\n\r\n/**\r\n  * Converts A string to an integer.\r\n  * @param s A string to convert into a number.\r\n  * @param radix A value between 2 and 36 that specifies the base of the number in numString. \r\n  * If this argument is not supplied, strings with a prefix of '0x' are considered hexadecimal.\r\n  * All other strings are considered decimal.\r\n  */\r\ndeclare function parseInt(s: string, radix?: number): number;\r\n\r\n/**\r\n  * Converts a string to a floating-point number. \r\n  * @param string A string that contains a floating-point number. \r\n  */\r\ndeclare function parseFloat(string: string): number;\r\n\r\n/**\r\n  * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number). \r\n  * @param number A numeric value.\r\n  */\r\ndeclare function isNaN(number: number): boolean;\r\n\r\n/** \r\n  * Determines whether a supplied number is finite.\r\n  * @param number Any numeric value.\r\n  */\r\ndeclare function isFinite(number: number): boolean;\r\n\r\n/**\r\n  * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\r\n  * @param encodedURI A value representing an encoded URI.\r\n  */\r\ndeclare function decodeURI(encodedURI: string): string;\r\n\r\n/**\r\n  * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\r\n  * @param encodedURIComponent A value representing an encoded URI component.\r\n  */\r\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\r\n\r\n/**\r\n  * Encodes a text string as a valid Uniform Resource Identifier (URI)\r\n  * @param uri A value representing an encoded URI.\r\n  */\r\ndeclare function encodeURI(uri: string): string;\r\n\r\n/**\r\n  * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\r\n  * @param uriComponent A value representing an encoded URI component.\r\n  */\r\ndeclare function encodeURIComponent(uriComponent: string): string;\r\n\r\ninterface PropertyDescriptor {\r\n    configurable?: boolean;\r\n    enumerable?: boolean;\r\n    value?: any;\r\n    writable?: boolean;\r\n    get? (): any;\r\n    set? (v: any): void;\r\n}\r\n\r\ninterface PropertyDescriptorMap {\r\n    [s: string]: PropertyDescriptor;\r\n}\r\n\r\ninterface Object {\r\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\r\n    constructor: Function;\r\n\r\n    /** Returns a string representation of an object. */\r\n    toString(): string;\r\n\r\n    /** Returns a date converted to a string using the current locale. */\r\n    toLocaleString(): string;\r\n\r\n    /** Returns the primitive value of the specified object. */\r\n    valueOf(): Object;\r\n\r\n    /**\r\n      * Determines whether an object has a property with the specified name.\r\n      * @param v A property name.\r\n      */\r\n    hasOwnProperty(v: string): boolean;\r\n\r\n    /**\r\n      * Determines whether an object exists in another object's prototype chain.\r\n      * @param v Another object whose prototype chain is to be checked.\r\n      */\r\n    isPrototypeOf(v: Object): boolean;\r\n\r\n    /**\r\n      * Determines whether a specified property is enumerable.\r\n      * @param v A property name.\r\n      */\r\n    propertyIsEnumerable(v: string): boolean;\r\n}\r\n\r\ninterface ObjectConstructor {\r\n    new (value?: any): Object;\r\n    (): any;\r\n    (value: any): any;\r\n\r\n    /** A reference to the prototype for a class of objects. */\r\n    prototype: Object;\r\n\r\n    /**\r\n      * Returns the prototype of an object.\r\n      * @param o The object that references the prototype.\r\n      */\r\n    getPrototypeOf(o: any): any;\r\n\r\n    /**\r\n      * Gets the own property descriptor of the specified object.\r\n      * An own property descriptor is one that is defined directly on the object and is not inherited from the object's prototype.\r\n      * @param o Object that contains the property.\r\n      * @param p Name of the property.\r\n    */\r\n    getOwnPropertyDescriptor(o: any, p: string): PropertyDescriptor;\r\n\r\n    /**\r\n      * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\r\n      * on that object, and are not inherited from the object's prototype. The properties of an object include both fields (objects) and functions.\r\n      * @param o Object that contains the own properties.\r\n      */\r\n    getOwnPropertyNames(o: any): string[];\r\n\r\n    /**\r\n      * Creates an object that has the specified prototype, and that optionally contains specified properties.\r\n      * @param o Object to use as a prototype. May be null\r\n      * @param properties JavaScript object that contains one or more property descriptors.\r\n      */\r\n    create(o: any, properties?: PropertyDescriptorMap): any;\r\n\r\n    /**\r\n      * Adds a property to an object, or modifies attributes of an existing property.\r\n      * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\r\n      * @param p The property name.\r\n      * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\r\n      */\r\n    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any;\r\n\r\n    /**\r\n      * Adds one or more properties to an object, and/or modifies attributes of existing properties.\r\n      * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\r\n      * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\r\n      */\r\n    defineProperties(o: any, properties: PropertyDescriptorMap): any;\r\n\r\n    /**\r\n      * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\r\n      * @param o Object on which to lock the attributes.\r\n      */\r\n    seal(o: any): any;\r\n\r\n    /**\r\n      * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\r\n      * @param o Object on which to lock the attributes.\r\n      */\r\n    freeze(o: any): any;\r\n\r\n    /**\r\n      * Prevents the addition of new properties to an object.\r\n      * @param o Object to make non-extensible.\r\n      */\r\n    preventExtensions(o: any): any;\r\n\r\n    /**\r\n      * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\r\n      * @param o Object to test.\r\n      */\r\n    isSealed(o: any): boolean;\r\n\r\n    /**\r\n      * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\r\n      * @param o Object to test.\r\n      */\r\n    isFrozen(o: any): boolean;\r\n\r\n    /**\r\n      * Returns a value that indicates whether new properties can be added to an object.\r\n      * @param o Object to test.\r\n      */\r\n    isExtensible(o: any): boolean;\r\n\r\n    /**\r\n      * Returns the names of the enumerable properties and methods of an object.\r\n      * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\r\n      */\r\n    keys(o: any): string[];\r\n}\r\n\r\n/**\r\n  * Provides functionality common to all JavaScript objects.\r\n  */\r\ndeclare var Object: ObjectConstructor;\r\n\r\n/**\r\n  * Creates a new function.\r\n  */\r\ninterface Function {\r\n    /**\r\n      * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\r\n      * @param thisArg The object to be used as the this object.\r\n      * @param argArray A set of arguments to be passed to the function.\r\n      */\r\n    apply(thisArg: any, argArray?: any): any;\r\n\r\n    /**\r\n      * Calls a method of an object, substituting another object for the current object.\r\n      * @param thisArg The object to be used as the current object.\r\n      * @param argArray A list of arguments to be passed to the method.\r\n      */\r\n    call(thisArg: any, ...argArray: any[]): any;\r\n\r\n    /**\r\n      * For a given function, creates a bound function that has the same body as the original function.\r\n      * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\r\n      * @param thisArg An object to which the this keyword can refer inside the new function.\r\n      * @param argArray A list of arguments to be passed to the new function.\r\n      */\r\n    bind(thisArg: any, ...argArray: any[]): any;\r\n\r\n    prototype: any;\r\n    length: number;\r\n\r\n    // Non-standard extensions\r\n    arguments: any;\r\n    caller: Function;\r\n}\r\n\r\ninterface FunctionConstructor {\r\n    /**\r\n      * Creates a new function.\r\n      * @param args A list of arguments the function accepts.\r\n      */\r\n    new (...args: string[]): Function;\r\n    (...args: string[]): Function;\r\n    prototype: Function;\r\n}\r\n\r\ndeclare var Function: FunctionConstructor;\r\n\r\ninterface IArguments {\r\n    [index: number]: any;\r\n    length: number;\r\n    callee: Function;\r\n}\r\n\r\ninterface String {\r\n    /** Returns a string representation of a string. */\r\n    toString(): string;\r\n\r\n    /**\r\n      * Returns the character at the specified index.\r\n      * @param pos The zero-based index of the desired character.\r\n      */\r\n    charAt(pos: number): string;\r\n\r\n    /**\r\n      * Returns the Unicode value of the character at the specified location.\r\n      * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\r\n      */\r\n    charCodeAt(index: number): number;\r\n\r\n    /**\r\n      * Returns a string that contains the concatenation of two or more strings.\r\n      * @param strings The strings to append to the end of the string.\r\n      */\r\n    concat(...strings: string[]): string;\r\n\r\n    /**\r\n      * Returns the position of the first occurrence of a substring.\r\n      * @param searchString The substring to search for in the string\r\n      * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\r\n      */\r\n    indexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n      * Returns the last occurrence of a substring in the string.\r\n      * @param searchString The substring to search for.\r\n      * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\r\n      */\r\n    lastIndexOf(searchString: string, position?: number): number;\r\n\r\n    /**\r\n      * Determines whether two strings are equivalent in the current locale.\r\n      * @param that String to compare to target string\r\n      */\r\n    localeCompare(that: string): number;\r\n\r\n    /**\r\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n      * @param regexp A variable name or string literal containing the regular expression pattern and flags.\r\n      */\r\n    match(regexp: string): RegExpMatchArray;\r\n\r\n    /**\r\n      * Matches a string with a regular expression, and returns an array containing the results of that search.\r\n      * @param regexp A regular expression object that contains the regular expression pattern and applicable flags.\r\n      */\r\n    match(regexp: RegExp): RegExpMatchArray;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A String object or string literal that represents the regular expression\r\n      * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.\r\n      */\r\n    replace(searchValue: string, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A String object or string literal that represents the regular expression\r\n      * @param replaceValue A function that returns the replacement text.\r\n      */\r\n    replace(searchValue: string, replaceValue: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\r\n      * @param replaceValue A String object or string literal containing the text to replace for every successful match of rgExp in stringObj.\r\n      */\r\n    replace(searchValue: RegExp, replaceValue: string): string;\r\n\r\n    /**\r\n      * Replaces text in a string, using a regular expression or search string.\r\n      * @param searchValue A Regular Expression object containing the regular expression pattern and applicable flags\r\n      * @param replaceValue A function that returns the replacement text.\r\n      */\r\n    replace(searchValue: RegExp, replaceValue: (substring: string, ...args: any[]) => string): string;\r\n\r\n    /**\r\n      * Finds the first substring match in a regular expression search.\r\n      * @param regexp The regular expression pattern and applicable flags.\r\n      */\r\n    search(regexp: string): number;\r\n\r\n    /**\r\n      * Finds the first substring match in a regular expression search.\r\n      * @param regexp The regular expression pattern and applicable flags.\r\n      */\r\n    search(regexp: RegExp): number;\r\n\r\n    /**\r\n      * Returns a section of a string.\r\n      * @param start The index to the beginning of the specified portion of stringObj.\r\n      * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end. \r\n      * If this value is not specified, the substring continues to the end of stringObj.\r\n      */\r\n    slice(start?: number, end?: number): string;\r\n\r\n    /**\r\n      * Split a string into substrings using the specified separator and return them as an array.\r\n      * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \r\n      * @param limit A value used to limit the number of elements returned in the array.\r\n      */\r\n    split(separator: string, limit?: number): string[];\r\n\r\n    /**\r\n      * Split a string into substrings using the specified separator and return them as an array.\r\n      * @param separator A Regular Express that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned. \r\n      * @param limit A value used to limit the number of elements returned in the array.\r\n      */\r\n    split(separator: RegExp, limit?: number): string[];\r\n\r\n    /**\r\n      * Returns the substring at the specified location within a String object.\r\n      * @param start The zero-based index number indicating the beginning of the substring.\r\n      * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\r\n      * If end is omitted, the characters from start through the end of the original string are returned.\r\n      */\r\n    substring(start: number, end?: number): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to lowercase. */\r\n    toLowerCase(): string;\r\n\r\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment's current locale. */\r\n    toLocaleLowerCase(): string;\r\n\r\n    /** Converts all the alphabetic characters in a string to uppercase. */\r\n    toUpperCase(): string;\r\n\r\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale. */\r\n    toLocaleUpperCase(): string;\r\n\r\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\r\n    trim(): string;\r\n\r\n    /** Returns the length of a String object. */\r\n    length: number;\r\n\r\n    // IE extensions\r\n    /**\r\n      * Gets a substring beginning at the specified location and having the specified length.\r\n      * @param from The starting position of the desired substring. The index of the first character in the string is zero.\r\n      * @param length The number of characters to include in the returned substring.\r\n      */\r\n    substr(from: number, length?: number): string;\r\n\r\n    [index: number]: string;\r\n}\r\n\r\ninterface StringConstructor {\r\n    new (value?: any): String;\r\n    (value?: any): string;\r\n    prototype: String;\r\n    fromCharCode(...codes: number[]): string;\r\n}\r\n\r\n/**\r\n  * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\r\n  */\r\ndeclare var String: StringConstructor;\r\n\r\ninterface Boolean {\r\n}\r\n\r\ninterface BooleanConstructor {\r\n    new (value?: any): Boolean;\r\n    (value?: any): boolean;\r\n    prototype: Boolean;\r\n}\r\n\r\ndeclare var Boolean: BooleanConstructor;\r\n\r\ninterface Number {\r\n    /**\r\n      * Returns a string representation of an object.\r\n      * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\r\n      */\r\n    toString(radix?: number): string;\r\n\r\n    /**\r\n      * Returns a string representing a number in fixed-point notation.\r\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n      */\r\n    toFixed(fractionDigits?: number): string;\r\n\r\n    /**\r\n      * Returns a string containing a number represented in exponential notation.\r\n      * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\r\n      */\r\n    toExponential(fractionDigits?: number): string;\r\n\r\n    /**\r\n      * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\r\n      * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\r\n      */\r\n    toPrecision(precision?: number): string;\r\n}\r\n\r\ninterface NumberConstructor {\r\n    new (value?: any): Number;\r\n    (value?: any): number;\r\n    prototype: Number;\r\n\r\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\r\n    MAX_VALUE: number;\r\n\r\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\r\n    MIN_VALUE: number;\r\n\r\n    /**\r\n      * A value that is not a number.\r\n      * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\r\n      */\r\n    NaN: number;\r\n\r\n    /**\r\n      * A value that is less than the largest negative number that can be represented in JavaScript.\r\n      * JavaScript displays NEGATIVE_INFINITY values as -infinity.\r\n      */\r\n    NEGATIVE_INFINITY: number;\r\n\r\n    /**\r\n      * A value greater than the largest number that can be represented in JavaScript.\r\n      * JavaScript displays POSITIVE_INFINITY values as infinity.\r\n      */\r\n    POSITIVE_INFINITY: number;\r\n}\r\n\r\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\r\ndeclare var Number: NumberConstructor;\r\n\r\ninterface TemplateStringsArray extends Array<string> {\r\n    raw: string[];\r\n}\r\n\r\ninterface Math {\r\n    /** The mathematical constant e. This is Euler's number, the base of natural logarithms. */\r\n    E: number;\r\n    /** The natural logarithm of 10. */\r\n    LN10: number;\r\n    /** The natural logarithm of 2. */\r\n    LN2: number;\r\n    /** The base-2 logarithm of e. */\r\n    LOG2E: number;\r\n    /** The base-10 logarithm of e. */\r\n    LOG10E: number;\r\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\r\n    PI: number;\r\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\r\n    SQRT1_2: number;\r\n    /** The square root of 2. */\r\n    SQRT2: number;\r\n    /**\r\n      * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\r\n      * For example, the absolute value of -5 is the same as the absolute value of 5.\r\n      * @param x A numeric expression for which the absolute value is needed.\r\n      */\r\n    abs(x: number): number;\r\n    /**\r\n      * Returns the arc cosine (or inverse cosine) of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    acos(x: number): number;\r\n    /**\r\n      * Returns the arcsine of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    asin(x: number): number;\r\n    /**\r\n      * Returns the arctangent of a number.\r\n      * @param x A numeric expression for which the arctangent is needed.\r\n      */\r\n    atan(x: number): number;\r\n    /**\r\n      * Returns the angle (in radians) from the X axis to a point (y,x).\r\n      * @param y A numeric expression representing the cartesian y-coordinate.\r\n      * @param x A numeric expression representing the cartesian x-coordinate.\r\n      */\r\n    atan2(y: number, x: number): number;\r\n    /**\r\n      * Returns the smallest number greater than or equal to its numeric argument.\r\n      * @param x A numeric expression.\r\n      */\r\n    ceil(x: number): number;\r\n    /**\r\n      * Returns the cosine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    cos(x: number): number;\r\n    /**\r\n      * Returns e (the base of natural logarithms) raised to a power.\r\n      * @param x A numeric expression representing the power of e.\r\n      */\r\n    exp(x: number): number;\r\n    /**\r\n      * Returns the greatest number less than or equal to its numeric argument.\r\n      * @param x A numeric expression.\r\n      */\r\n    floor(x: number): number;\r\n    /**\r\n      * Returns the natural logarithm (base e) of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    log(x: number): number;\r\n    /**\r\n      * Returns the larger of a set of supplied numeric expressions.\r\n      * @param values Numeric expressions to be evaluated.\r\n      */\r\n    max(...values: number[]): number;\r\n    /**\r\n      * Returns the smaller of a set of supplied numeric expressions.\r\n      * @param values Numeric expressions to be evaluated.\r\n      */\r\n    min(...values: number[]): number;\r\n    /**\r\n      * Returns the value of a base expression taken to a specified power.\r\n      * @param x The base value of the expression.\r\n      * @param y The exponent value of the expression.\r\n      */\r\n    pow(x: number, y: number): number;\r\n    /** Returns a pseudorandom number between 0 and 1. */\r\n    random(): number;\r\n    /**\r\n      * Returns a supplied numeric expression rounded to the nearest number.\r\n      * @param x The value to be rounded to the nearest number.\r\n      */\r\n    round(x: number): number;\r\n    /**\r\n      * Returns the sine of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    sin(x: number): number;\r\n    /**\r\n      * Returns the square root of a number.\r\n      * @param x A numeric expression.\r\n      */\r\n    sqrt(x: number): number;\r\n    /**\r\n      * Returns the tangent of a number.\r\n      * @param x A numeric expression that contains an angle measured in radians.\r\n      */\r\n    tan(x: number): number;\r\n}\r\n/** An intrinsic object that provides basic mathematics functionality and constants. */\r\ndeclare var Math: Math;\r\n\r\n/** Enables basic storage and retrieval of dates and times. */\r\ninterface Date {\r\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\r\n    toString(): string;\r\n    /** Returns a date as a string value. */\r\n    toDateString(): string;\r\n    /** Returns a time as a string value. */\r\n    toTimeString(): string;\r\n    /** Returns a value as a string value appropriate to the host environment's current locale. */\r\n    toLocaleString(): string;\r\n    /** Returns a date as a string value appropriate to the host environment's current locale. */\r\n    toLocaleDateString(): string;\r\n    /** Returns a time as a string value appropriate to the host environment's current locale. */\r\n    toLocaleTimeString(): string;\r\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\r\n    valueOf(): number;\r\n    /** Gets the time value in milliseconds. */\r\n    getTime(): number;\r\n    /** Gets the year, using local time. */\r\n    getFullYear(): number;\r\n    /** Gets the year using Universal Coordinated Time (UTC). */\r\n    getUTCFullYear(): number;\r\n    /** Gets the month, using local time. */\r\n    getMonth(): number;\r\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMonth(): number;\r\n    /** Gets the day-of-the-month, using local time. */\r\n    getDate(): number;\r\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\r\n    getUTCDate(): number;\r\n    /** Gets the day of the week, using local time. */\r\n    getDay(): number;\r\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\r\n    getUTCDay(): number;\r\n    /** Gets the hours in a date, using local time. */\r\n    getHours(): number;\r\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCHours(): number;\r\n    /** Gets the minutes of a Date object, using local time. */\r\n    getMinutes(): number;\r\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMinutes(): number;\r\n    /** Gets the seconds of a Date object, using local time. */\r\n    getSeconds(): number;\r\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCSeconds(): number;\r\n    /** Gets the milliseconds of a Date, using local time. */\r\n    getMilliseconds(): number;\r\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\r\n    getUTCMilliseconds(): number;\r\n    /** Gets the difference in minutes between the time on the local computer and Universal Coordinated Time (UTC). */\r\n    getTimezoneOffset(): number;\r\n    /**\r\n      * Sets the date and time value in the Date object.\r\n      * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\r\n      */\r\n    setTime(time: number): number;\r\n    /**\r\n      * Sets the milliseconds value in the Date object using local time.\r\n      * @param ms A numeric value equal to the millisecond value.\r\n      */\r\n    setMilliseconds(ms: number): number;\r\n    /**\r\n      * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param ms A numeric value equal to the millisecond value.\r\n      */\r\n    setUTCMilliseconds(ms: number): number;\r\n\r\n    /**\r\n      * Sets the seconds value in the Date object using local time.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setSeconds(sec: number, ms?: number): number;\r\n    /**\r\n      * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCSeconds(sec: number, ms?: number): number;\r\n    /**\r\n      * Sets the minutes value in the Date object using local time.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the hour value in the Date object using local time.\r\n      * @param hours A numeric value equal to the hours value.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param hours A numeric value equal to the hours value.\r\n      * @param min A numeric value equal to the minutes value.\r\n      * @param sec A numeric value equal to the seconds value.\r\n      * @param ms A numeric value equal to the milliseconds value.\r\n      */\r\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\r\n    /**\r\n      * Sets the numeric day-of-the-month value of the Date object using local time.\r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setDate(date: number): number;\r\n    /**\r\n      * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setUTCDate(date: number): number;\r\n    /**\r\n      * Sets the month value in the Date object using local time.\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n      * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\r\n      */\r\n    setMonth(month: number, date?: number): number;\r\n    /**\r\n      * Sets the month value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\r\n      * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\r\n      */\r\n    setUTCMonth(month: number, date?: number): number;\r\n    /**\r\n      * Sets the year of the Date object using local time.\r\n      * @param year A numeric value for the year.\r\n      * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\r\n      * @param date A numeric value equal for the day of the month.\r\n      */\r\n    setFullYear(year: number, month?: number, date?: number): number;\r\n    /**\r\n      * Sets the year value in the Date object using Universal Coordinated Time (UTC).\r\n      * @param year A numeric value equal to the year.\r\n      * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\r\n      * @param date A numeric value equal to the day of the month.\r\n      */\r\n    setUTCFullYear(year: number, month?: number, date?: number): number;\r\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\r\n    toUTCString(): string;\r\n    /** Returns a date as a string value in ISO format. */\r\n    toISOString(): string;\r\n    /** Used by the JSON.stringify method to enable the transformation of an object's data for JavaScript Object Notation (JSON) serialization. */\r\n    toJSON(key?: any): string;\r\n}\r\n\r\ninterface DateConstructor {\r\n    new (): Date;\r\n    new (value: number): Date;\r\n    new (value: string): Date;\r\n    new (year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\r\n    (): string;\r\n    prototype: Date;\r\n    /**\r\n      * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\r\n      * @param s A date string\r\n      */\r\n    parse(s: string): number;\r\n    /**\r\n      * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date. \r\n      * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\r\n      * @param month The month as an number between 0 and 11 (January to December).\r\n      * @param date The date as an number between 1 and 31.\r\n      * @param hours Must be supplied if minutes is supplied. An number from 0 to 23 (midnight to 11pm) that specifies the hour.\r\n      * @param minutes Must be supplied if seconds is supplied. An number from 0 to 59 that specifies the minutes.\r\n      * @param seconds Must be supplied if milliseconds is supplied. An number from 0 to 59 that specifies the seconds.\r\n      * @param ms An number from 0 to 999 that specifies the milliseconds.\r\n      */\r\n    UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\r\n    now(): number;\r\n}\r\n\r\ndeclare var Date: DateConstructor;\r\n\r\ninterface RegExpMatchArray extends Array<string> {\r\n    index?: number;\r\n    input?: string;\r\n}\r\n\r\ninterface RegExpExecArray extends Array<string> {\r\n    index: number;\r\n    input: string;\r\n}\r\n\r\ninterface RegExp {\r\n    /**\r\n      * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\r\n      * @param string The String object or string literal on which to perform the search.\r\n      */\r\n    exec(string: string): RegExpExecArray;\r\n\r\n    /**\r\n      * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\r\n      * @param string String on which to perform the search.\r\n      */\r\n    test(string: string): boolean;\r\n\r\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The rgExp argument is a Regular expression object. It can be a variable name or a literal. */\r\n    source: string;\r\n\r\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\r\n    global: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\r\n    ignoreCase: boolean;\r\n\r\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\r\n    multiline: boolean;\r\n\r\n    lastIndex: number;\r\n\r\n    // Non-standard extensions\r\n    compile(): RegExp;\r\n}\r\n\r\ninterface RegExpConstructor {\r\n    new (pattern: string, flags?: string): RegExp;\r\n    (pattern: string, flags?: string): RegExp;\r\n    prototype: RegExp;\r\n\r\n    // Non-standard extensions\r\n    $1: string;\r\n    $2: string;\r\n    $3: string;\r\n    $4: string;\r\n    $5: string;\r\n    $6: string;\r\n    $7: string;\r\n    $8: string;\r\n    $9: string;\r\n    lastMatch: string;\r\n}\r\n\r\ndeclare var RegExp: RegExpConstructor;\r\n\r\ninterface Error {\r\n    name: string;\r\n    message: string;\r\n}\r\n\r\ninterface ErrorConstructor {\r\n    new (message?: string): Error;\r\n    (message?: string): Error;\r\n    prototype: Error;\r\n}\r\n\r\ndeclare var Error: ErrorConstructor;\r\n\r\ninterface EvalError extends Error {\r\n}\r\n\r\ninterface EvalErrorConstructor {\r\n    new (message?: string): EvalError;\r\n    (message?: string): EvalError;\r\n    prototype: EvalError;\r\n}\r\n\r\ndeclare var EvalError: EvalErrorConstructor;\r\n\r\ninterface RangeError extends Error {\r\n}\r\n\r\ninterface RangeErrorConstructor {\r\n    new (message?: string): RangeError;\r\n    (message?: string): RangeError;\r\n    prototype: RangeError;\r\n}\r\n\r\ndeclare var RangeError: RangeErrorConstructor;\r\n\r\ninterface ReferenceError extends Error {\r\n}\r\n\r\ninterface ReferenceErrorConstructor {\r\n    new (message?: string): ReferenceError;\r\n    (message?: string): ReferenceError;\r\n    prototype: ReferenceError;\r\n}\r\n\r\ndeclare var ReferenceError: ReferenceErrorConstructor;\r\n\r\ninterface SyntaxError extends Error {\r\n}\r\n\r\ninterface SyntaxErrorConstructor {\r\n    new (message?: string): SyntaxError;\r\n    (message?: string): SyntaxError;\r\n    prototype: SyntaxError;\r\n}\r\n\r\ndeclare var SyntaxError: SyntaxErrorConstructor;\r\n\r\ninterface TypeError extends Error {\r\n}\r\n\r\ninterface TypeErrorConstructor {\r\n    new (message?: string): TypeError;\r\n    (message?: string): TypeError;\r\n    prototype: TypeError;\r\n}\r\n\r\ndeclare var TypeError: TypeErrorConstructor;\r\n\r\ninterface URIError extends Error {\r\n}\r\n\r\ninterface URIErrorConstructor {\r\n    new (message?: string): URIError;\r\n    (message?: string): URIError;\r\n    prototype: URIError;\r\n}\r\n\r\ndeclare var URIError: URIErrorConstructor;\r\n\r\ninterface JSON {\r\n    /**\r\n      * Converts a JavaScript Object Notation (JSON) string into an object.\r\n      * @param text A valid JSON string.\r\n      * @param reviver A function that transforms the results. This function is called for each member of the object.\r\n      * If a member contains nested objects, the nested objects are transformed before the parent object is.\r\n      */\r\n    parse(text: string, reviver?: (key: any, value: any) => any): any;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      */\r\n    stringify(value: any): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer A function that transforms the results.\r\n      */\r\n    stringify(value: any, replacer: (key: string, value: any) => any): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer Array that transforms the results.\r\n      */\r\n    stringify(value: any, replacer: any[]): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer A function that transforms the results.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n      */\r\n    stringify(value: any, replacer: (key: string, value: any) => any, space: any): string;\r\n    /**\r\n      * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\r\n      * @param value A JavaScript value, usually an object or array, to be converted.\r\n      * @param replacer Array that transforms the results.\r\n      * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\r\n      */\r\n    stringify(value: any, replacer: any[], space: any): string;\r\n}\r\n/**\r\n  * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\r\n  */\r\ndeclare var JSON: JSON;\r\n\r\n\r\n/////////////////////////////\r\n/// ECMAScript Array API (specially handled by compiler)\r\n/////////////////////////////\r\n\r\ninterface Array<T> {\r\n    /**\r\n      * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Returns a string representation of an array.\r\n      */\r\n    toString(): string;\r\n    toLocaleString(): string;\r\n    /**\r\n      * Appends new elements to an array, and returns the new length of the array.\r\n      * @param items New elements of the Array.\r\n      */\r\n    push(...items: T[]): number;\r\n    /**\r\n      * Removes the last element from an array and returns it.\r\n      */\r\n    pop(): T;\r\n    /**\r\n      * Combines two or more arrays.\r\n      * @param items Additional items to add to the end of array1.\r\n      */\r\n    concat<U extends T[]>(...items: U[]): T[];\r\n    /**\r\n      * Combines two or more arrays.\r\n      * @param items Additional items to add to the end of array1.\r\n      */\r\n    concat(...items: T[]): T[];\r\n    /**\r\n      * Adds all the elements of an array separated by the specified separator string.\r\n      * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\r\n      */\r\n    join(separator?: string): string;\r\n    /**\r\n      * Reverses the elements in an Array.\r\n      */\r\n    reverse(): T[];\r\n    /**\r\n      * Removes the first element from an array and returns it.\r\n      */\r\n    shift(): T;\r\n    /**\r\n      * Returns a section of an array.\r\n      * @param start The beginning of the specified portion of the array.\r\n      * @param end The end of the specified portion of the array.\r\n      */\r\n    slice(start?: number, end?: number): T[];\r\n\r\n    /**\r\n      * Sorts an array.\r\n      * @param compareFn The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.\r\n      */\r\n    sort(compareFn?: (a: T, b: T) => number): T[];\r\n\r\n    /**\r\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n      * @param start The zero-based location in the array from which to start removing elements.\r\n      */\r\n    splice(start: number): T[];\r\n\r\n    /**\r\n      * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\r\n      * @param start The zero-based location in the array from which to start removing elements.\r\n      * @param deleteCount The number of elements to remove.\r\n      * @param items Elements to insert into the array in place of the deleted elements.\r\n      */\r\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\r\n\r\n    /**\r\n      * Inserts new elements at the start of an array.\r\n      * @param items  Elements to insert at the start of the Array.\r\n      */\r\n    unshift(...items: T[]): number;\r\n\r\n    /**\r\n      * Returns the index of the first occurrence of a value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\r\n      */\r\n    indexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Returns the index of the last occurrence of a specified value in an array.\r\n      * @param searchElement The value to locate in the array.\r\n      * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\r\n      */\r\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\r\n\r\n    /**\r\n      * Determines whether all the members of an array satisfy the specified test.\r\n      * @param callbackfn A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    every(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Determines whether the specified callback function returns true for any element of an array.\r\n      * @param callbackfn A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.\r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    some(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): boolean;\r\n\r\n    /**\r\n      * Performs the specified action for each element in an array.\r\n      * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. \r\n      * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\r\n\r\n    /**\r\n      * Calls a defined callback function on each element of an array, and returns an array that contains the results.\r\n      * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\r\n\r\n    /**\r\n      * Returns the elements of an array that meet the condition specified in a callback function.\r\n      * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array. \r\n      * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\r\n      */\r\n    filter(callbackfn: (value: T, index: number, array: T[]) => boolean, thisArg?: any): T[];\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue?: T): T;\r\n    /**\r\n      * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\r\n      * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. \r\n      * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\r\n      */\r\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\r\n\r\n    [n: number]: T;\r\n}\r\n\r\ninterface ArrayConstructor {\r\n    new (arrayLength?: number): any[];\r\n    new <T>(arrayLength: number): T[];\r\n    new <T>(...items: T[]): T[];\r\n    (arrayLength?: number): any[];\r\n    <T>(arrayLength: number): T[];\r\n    <T>(...items: T[]): T[];\r\n    isArray(arg: any): boolean;\r\n    prototype: Array<any>;\r\n}\r\n\r\ndeclare var Array: ArrayConstructor;\r\n"
});



},{}]},{},[1]);
